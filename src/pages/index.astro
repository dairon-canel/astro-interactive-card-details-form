---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Form from '../components/Form.astro';
---

<Layout title="Frontend Mentor | Interactive card details form">
  <main>
    <section class="card_section">
      <Card display="back" align="end" style={{ marginBottom: '-60px' }} />
      <Card display="front" align="start" />
    </section>
    <Form />
  </main>
</Layout>

<script>
  const cardNumberInputField = document.getElementById('cardNumber');
  const expDateMInputField = document.getElementById('expDateM');
  const expDateYInputField = document.getElementById('expDateY');
  const cvcNumberInputField = document.getElementById('cvcNumber');

  if (cardNumberInputField) {
    cardNumberInputField.addEventListener('input', validateAndUpdateCardNumber);
  }
  if (expDateMInputField) {
    expDateMInputField.addEventListener('input', validateAndUpdateExpDateM);
  }
  if (expDateYInputField) {
    expDateYInputField.addEventListener('input', validateAndUpdateExpDateY);
  }
  if (cvcNumberInputField) {
    cvcNumberInputField.addEventListener('input', validateAndUpdateCvcNumber);
  }

  function validateAndUpdateCardNumber() {
    const cardNumberOutput = document.getElementById('cardNumberOutput');

    const cardNumberInputValue = (cardNumberInputField as HTMLInputElement)
      .value;

    // Remove any non-digit characters from the input value
    const cardNumberFormattedValue = cardNumberInputValue.replace(/\De/g, '');

    // Pad the formatted value with zeros to make it 16 characters long
    const cardNumberPaddedValue = cardNumberFormattedValue.padEnd(16, '0');

    // Add a space every four characters
    const cardNumberFormattedOutput = cardNumberPaddedValue.replace(
      /(.{4})/g,
      '$1 ',
    );

    if (cardNumberInputValue.length > 16) {
      (cardNumberInputField as HTMLInputElement).value =
        cardNumberInputValue.substring(0, 16);
      return;
    }
    (cardNumberOutput as HTMLDivElement).textContent =
      cardNumberFormattedOutput;
  }

  function validateAndUpdateExpDateM() {
    const expDateMOutput = document.getElementById('expDateMOutput');

    const expDateMInputValue = (expDateMInputField as HTMLInputElement).value;

    // Remove any non-digit characters from the input value
    const expDateMFormattedValue = expDateMInputValue.replace(/\De/g, '');

    // Pad the formatted value with zeros to make it 2 characters long
    let expDateMPaddedValue = expDateMFormattedValue.padStart(2, '0');

    if (expDateMInputValue == '012') {
      (expDateMInputField as HTMLInputElement).value = '12';
      (expDateMOutput as HTMLSpanElement).textContent = '12';
      return;
    }
    if (expDateMInputValue == '011') {
      (expDateMInputField as HTMLInputElement).value = '11';
      (expDateMOutput as HTMLSpanElement).textContent = '11';
      return;
    }
    if (expDateMInputValue == '010') {
      (expDateMInputField as HTMLInputElement).value = '10';
      (expDateMOutput as HTMLSpanElement).textContent = '10';
      return;
    }

    if (
      expDateMInputValue === '1' ||
      expDateMInputValue === '2' ||
      expDateMInputValue === '3' ||
      expDateMInputValue === '4' ||
      expDateMInputValue === '5' ||
      expDateMInputValue === '6' ||
      expDateMInputValue === '7' ||
      expDateMInputValue === '8' ||
      expDateMInputValue === '9'
    ) {
      (expDateMInputField as HTMLInputElement).value =
        expDateMFormattedValue.padStart(2, '0');
    }
    if (expDateMInputValue.length > 2) {
      (expDateMInputField as HTMLInputElement).value =
        expDateMInputValue.substring(0, 2);
      return;
    }

    (expDateMOutput as HTMLSpanElement).textContent = expDateMPaddedValue;
  }

  function validateAndUpdateExpDateY() {
    const expDateYOutput = document.getElementById('expDateYOutput');

    const expDateYInputValue = (expDateYInputField as HTMLInputElement).value;

    // Remove any non-digit characters from the input value
    const expDateYFormattedValue = expDateYInputValue.replace(/\De/g, '');

    // Pad the formatted value with zeros to make it 2 characters long
    let expDateYPaddedValue = expDateYFormattedValue.padStart(2, '0');

    if (expDateYInputValue.length > 2) {
      (expDateYInputField as HTMLInputElement).value =
        expDateYInputValue.substring(0, 2);
      return;
    }

    (expDateYOutput as HTMLSpanElement).textContent = expDateYPaddedValue;
  }

  function validateAndUpdateCvcNumber() {
    const cvcNumberOutput = document.getElementById('cvcNumberOutput');

    const cvcNumberInputValue = (cvcNumberInputField as HTMLInputElement).value;

    // Remove any non-digit characters from the input value
    const cvcNumberFormattedValue = cvcNumberInputValue.replace(/\De/g, '');

    // Pad the formatted value with zeros to make it 2 characters long
    let cvcNumberPaddedValue = cvcNumberFormattedValue.padStart(3, '0');

    if (cvcNumberInputValue.length > 3) {
      (cvcNumberInputField as HTMLInputElement).value =
        cvcNumberInputValue.substring(0, 3);
      return;
    }

    (cvcNumberOutput as HTMLSpanElement).textContent = cvcNumberPaddedValue;
  }
</script>

<style>
  main {
    min-height: 100vh;
    background-image: url('bg-main-mobile.png');
    background-repeat: no-repeat;
    background-color: white;
    padding-top: 32px;
    padding-left: 16px;
    padding-right: 16px;
  }

  .card_section {
    display: flex;
    flex-direction: column;
  }
</style>
